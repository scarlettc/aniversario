{"version":3,"sources":["img-love.jpg","img-cumple.jpg","img-big.jpg","Game.js","Home.js","ImagesBanner.js","Welcome.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","EmojiWink","role","aria-label","Game","styles","textAlign","fontFamily","fontSize","position","display","flexDirection","alignItems","justifyContent","backgroundColor","color","height","width","buttonStyles","border","padding","cursor","Home","useState","isMobilFlag","setIsMobilFlag","redirect","setRedirect","to","style","onPointerOver","onClick","isMobile","images","source","ImageLove","name","ImageCumple","ImageBig","Image","img","className","src","alt","ImagesBanner","map","index","key","EmojiKiss","Welcome","playing","setPlaying","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,oMCGrCC,G,YAAY,kBACd,0BACIC,KAAK,MACLC,aAAW,cAFf,kBAyBWC,EAlBF,WAET,OACI,6BACE,6CAAkB,kBAAC,EAAD,S,sBCXtBC,EAAS,CACXC,UAAW,SACXC,WAAY,YACZC,SAAU,OACVC,SAAU,QACVC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,SAChBC,gBAAiB,UACjBC,MAAO,QACPC,OAAQ,OACRC,MAAO,QAGLC,EAAe,CACjBJ,gBAAiB,QACjBK,OAAQ,OACRJ,MAAO,UACPK,QAAS,YACTZ,SAAU,OACVa,OAAQ,UACRd,WAAY,aAmCDe,EAjCF,WAAO,IAAD,EACwBC,oBAAS,GADjC,mBACPC,EADO,KACMC,EADN,OAEkBF,oBAAS,GAF3B,mBAEPG,EAFO,KAEGC,EAFH,KAaf,OACG,6BACKD,GAAY,kBAAC,IAAD,CAAUE,GAAG,aACzB,yBAAKC,MAAOxB,GACR,4EAEA,4BAAQyB,eAAa,EACjBD,MAAOX,EACPa,QAjBI,WACZC,WACAP,GAAe,GAGfE,GAAY,KAUR,+DAOCH,GAAe,mD,iEC/C1BS,EAAS,CACX,CACIC,OAAQC,IACRC,KAAM,YAEV,CACIF,OAAQG,IACRD,KAAM,cAEV,CACIF,OAAQI,IACRF,KAAM,YAIRG,EAAQ,SAAC,GAAD,IAAEC,EAAF,EAAEA,IAAF,OACV,yBAAKC,UAAU,YACX,yBACIC,IAAKF,EAAIN,OACTS,IAAKH,EAAIJ,KACTK,UAAU,YAkBPG,EAdM,kBACjB,yBAAKH,UAAU,iBAEPR,EAAOY,KAAK,SAACL,EAAKM,GAAN,OACR,kBAAC,EAAD,CACIN,IAAOA,EACPO,IAAOD,SC9BrBE,EAAY,kBAChB,0BACI9C,KAAK,MACLC,aAAW,cAFf,iBAsCa8C,EA9BC,WAAO,IAAD,EACY1B,oBAAS,GADrB,mBACZ2B,EADY,KACHC,EADG,KAOpB,OACE,yBAAKV,UAAU,aACZS,EACG,kBAAC,EAAD,MACA,6BACA,0CACA,4FAAiE,kBAAC,EAAD,OACjE,kBAAC,EAAD,MACA,oDAEA,4BACET,UAAU,SACVV,QAhBQ,WAChBoB,GAAW,KAaL,c,QCfKC,EAZH,WACV,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWjC,IACjC,kBAAC,IAAD,CAAO+B,OAAK,EAACC,KAAK,WAAWC,UAAWN,IACxC,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,QAAQC,UAAWnD,OCAzBoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0ff38114.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/img-love.17a9ddd9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img-cumple.1853c0fb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img-big.43071194.jpg\";","import React from 'react'\r\nimport './Game.css'\r\n\r\nconst EmojiWink = () => (\r\n    <span\r\n        role='img'\r\n        aria-label='emoji-wink'\r\n    >\r\n      ðŸ˜‰\r\n    </span> \r\n  )\r\nconst Game = () => {\r\n\r\n    return(\r\n        <div>\r\n          <h2>En proceso... <EmojiWink /></h2>\r\n            {/* <h1>Hoy te dare la oportunidad de que me ames mas, solo tienes que.....</h1> */}\r\n            {/* <h2>presionar el boton y ya, easy peasy. <EmojiWink /></h2>\r\n            \r\n          <button onPointerOver\r\n            className=\"button\"\r\n          >\r\n           Amame mas\r\n          </button> */}\r\n        </div>\r\n    )\r\n  \r\n}\r\n\r\nexport default Game","import React, { useState } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport {isMobile} from 'react-device-detect'\r\n\r\nconst styles = {\r\n    textAlign: 'center',\r\n    fontFamily: 'monospace',\r\n    fontSize: '20px',\r\n    position: 'fixed',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    backgroundColor: '#e91e63',\r\n    color: 'white',\r\n    height: '100%',\r\n    width: '100%'\r\n    \r\n}\r\nconst buttonStyles = {\r\n    backgroundColor: 'white',\r\n    border: 'none',\r\n    color: '#e91e63',\r\n    padding: '15px 32px',\r\n    fontSize: '16px',\r\n    cursor: 'pointer',\r\n    fontFamily: 'monospace'\r\n}\r\nconst Home = () => {\r\n    const [ isMobilFlag, setIsMobilFlag] = useState(false)\r\n    const [ redirect, setRedirect] = useState(false)\r\n\r\n    const validateWeb = () => {\r\n        if (isMobile) {\r\n            setIsMobilFlag(true)\r\n        }\r\n        else {\r\n            setRedirect(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n       <div>\r\n           {redirect && <Redirect to='/welcome' />}\r\n            <div style={styles}>\r\n                <h2>Solo puedes ver esto si estas en la compu...</h2>\r\n\r\n                <button onPointerOver\r\n                    style={buttonStyles}\r\n                    onClick={validateWeb}\r\n                >\r\n                    Si mi amor preciosa estoy en la compu (Pushme si es verdad)\r\n                </button>\r\n\r\n                {isMobilFlag && <h1>Me mentiste.....</h1>}\r\n            </div>\r\n       </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Home","import React from 'react'\r\nimport './ImagesBanner.css'\r\nimport ImageLove from './img-love.jpg'\r\nimport ImageCumple from './img-cumple.jpg'\r\nimport ImageBig from './img-big.jpg'\r\n\r\n\r\nconst images = [\r\n    {\r\n        source: ImageLove,\r\n        name: \"img-love\"\r\n    },\r\n    {\r\n        source: ImageCumple,\r\n        name: \"img-cumple\"\r\n    },\r\n    {\r\n        source: ImageBig,\r\n        name: \"img-big\"\r\n    } \r\n]\r\n\r\nconst Image = ({img}) => (\r\n    <div className=\"img-card\">\r\n        <img \r\n            src={img.source}\r\n            alt={img.name}\r\n            className=\"image\"\r\n        />\r\n    </div>\r\n  )\r\nconst ImagesBanner = () => (\r\n    <div className='img-container'>\r\n        {\r\n            images.map( (img, index) => (\r\n                <Image \r\n                    img = {img}\r\n                    key = {index}\r\n                />\r\n            ))\r\n        }\r\n    \r\n  </div>\r\n)\r\n\r\nexport default ImagesBanner","import React, { useState } from 'react'\r\nimport './App.css'\r\nimport ImagesBanner from './ImagesBanner'\r\nimport Game from './Game'\r\n\r\n\r\n\r\nconst EmojiKiss = () => (\r\n  <span\r\n      role='img'\r\n      aria-label='emoji-kiss'\r\n  >\r\n    ðŸ˜˜\r\n  </span> \r\n)\r\n\r\nconst Welcome = () => {\r\n  const [ playing, setPlaying ] = useState(false)\r\n  \r\n  const startGame = () => {\r\n    setPlaying(true)\r\n  }\r\n  \r\n  return (\r\n    <div className=\"container\">\r\n      {playing \r\n        ? <Game />\r\n        :(<div>\r\n          <h1>Hey!!!!!!!</h1>\r\n          <h2>Hoy cumplimos un mes mas vida mia, amos a juegar un jueguito <EmojiKiss /></h2>\r\n          <ImagesBanner />\r\n          <h2>Picale al boton !!!!</h2>\r\n\r\n          <button \r\n            className=\"button\"\r\n            onClick={ startGame }\r\n          >\r\n            Push me \r\n          </button>\r\n        </div>)\r\n      }\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default Welcome","import React from 'react'\nimport Game from './Game'\nimport Home from './Home'\nimport Welcome from './Welcome'\n\nimport { HashRouter  as Router, Route, Switch } from 'react-router-dom';\nconst App = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={Home}/>\n        <Route exact path=\"/welcome\" component={Welcome}/>\n        <Route exact path=\"/game\" component={Game}/>\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}